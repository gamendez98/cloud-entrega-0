# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.27.0
# source: users.sql
from typing import Optional

import sqlalchemy
import sqlalchemy.ext.asyncio

from models import models


CREATE_USER = """-- name: create_user \\:one
INSERT INTO users (username, email, password_hash) VALUES (:p1, :p2, :p3)
RETURNING id, username, email, password_hash
"""


class Querier:
    def __init__(self, conn: sqlalchemy.engine.Connection):
        self._conn = conn

    def create_user(self, *, username: str, email: str, password_hash: str) -> Optional[models.User]:
        row = self._conn.execute(sqlalchemy.text(CREATE_USER), {"p1": username, "p2": email, "p3": password_hash}).first()
        if row is None:
            return None
        return models.User(
            id=row[0],
            username=row[1],
            email=row[2],
            password_hash=row[3],
        )


class AsyncQuerier:
    def __init__(self, conn: sqlalchemy.ext.asyncio.AsyncConnection):
        self._conn = conn

    async def create_user(self, *, username: str, email: str, password_hash: str) -> Optional[models.User]:
        row = (await self._conn.execute(sqlalchemy.text(CREATE_USER), {"p1": username, "p2": email, "p3": password_hash})).first()
        if row is None:
            return None
        return models.User(
            id=row[0],
            username=row[1],
            email=row[2],
            password_hash=row[3],
        )
