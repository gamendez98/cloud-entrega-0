# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.27.0
# source: tasks.sql
import dataclasses
import datetime
from typing import AsyncIterator, Iterator, Optional

import sqlalchemy
import sqlalchemy.ext.asyncio

from models import models


CREATE_TASK = """-- name: create_task \\:one
INSERT INTO tasks (description, person_id, category_id)
VALUES (:p1, :p2, :p3)
RETURNING id, description, created_at, expected_finished_at, state, person_id, category_id
"""


DELETE_TASK = """-- name: delete_task \\:one
DELETE
FROM tasks
WHERE id = :p1
RETURNING id, description, created_at, expected_finished_at, state, person_id, category_id
"""


GET_TASK_BY_ID = """-- name: get_task_by_id \\:one
SELECT id, description, created_at, expected_finished_at, state, person_id, category_id
FROM tasks
WHERE id = :p1
"""


GET_TASKS_BY_USERNAME = """-- name: get_tasks_by_username \\:many
SELECT tasks.id, tasks.description, tasks.created_at, tasks.expected_finished_at, tasks.state, tasks.person_id, tasks.category_id
FROM tasks
         JOIN persons ON tasks.person_id = persons.id AND persons.username = :p1
"""


UPDATE_TASK = """-- name: update_task \\:one
UPDATE tasks
SET description          = :p1,
    expected_finished_at = :p2,
    state                = :p3,
    person_id            = :p4,
    category_id          = :p5
WHERE id = :p6
RETURNING id, description, created_at, expected_finished_at, state, person_id, category_id
"""


@dataclasses.dataclass()
class UpdateTaskParams:
    description: str
    expected_finished_at: Optional[datetime.datetime]
    state: models.State
    person_id: Optional[int]
    category_id: Optional[int]
    id: int


class Querier:
    def __init__(self, conn: sqlalchemy.engine.Connection):
        self._conn = conn

    def create_task(self, *, description: str, person_id: Optional[int], category_id: Optional[int]) -> Optional[models.Task]:
        row = self._conn.execute(sqlalchemy.text(CREATE_TASK), {"p1": description, "p2": person_id, "p3": category_id}).first()
        if row is None:
            return None
        return models.Task(
            id=row[0],
            description=row[1],
            created_at=row[2],
            expected_finished_at=row[3],
            state=row[4],
            person_id=row[5],
            category_id=row[6],
        )

    def delete_task(self, *, id: int) -> Optional[models.Task]:
        row = self._conn.execute(sqlalchemy.text(DELETE_TASK), {"p1": id}).first()
        if row is None:
            return None
        return models.Task(
            id=row[0],
            description=row[1],
            created_at=row[2],
            expected_finished_at=row[3],
            state=row[4],
            person_id=row[5],
            category_id=row[6],
        )

    def get_task_by_id(self, *, id: int) -> Optional[models.Task]:
        row = self._conn.execute(sqlalchemy.text(GET_TASK_BY_ID), {"p1": id}).first()
        if row is None:
            return None
        return models.Task(
            id=row[0],
            description=row[1],
            created_at=row[2],
            expected_finished_at=row[3],
            state=row[4],
            person_id=row[5],
            category_id=row[6],
        )

    def get_tasks_by_username(self, *, username: str) -> Iterator[models.Task]:
        result = self._conn.execute(sqlalchemy.text(GET_TASKS_BY_USERNAME), {"p1": username})
        for row in result:
            yield models.Task(
                id=row[0],
                description=row[1],
                created_at=row[2],
                expected_finished_at=row[3],
                state=row[4],
                person_id=row[5],
                category_id=row[6],
            )

    def update_task(self, arg: UpdateTaskParams) -> Optional[models.Task]:
        row = self._conn.execute(sqlalchemy.text(UPDATE_TASK), {
            "p1": arg.description,
            "p2": arg.expected_finished_at,
            "p3": arg.state,
            "p4": arg.person_id,
            "p5": arg.category_id,
            "p6": arg.id,
        }).first()
        if row is None:
            return None
        return models.Task(
            id=row[0],
            description=row[1],
            created_at=row[2],
            expected_finished_at=row[3],
            state=row[4],
            person_id=row[5],
            category_id=row[6],
        )


class AsyncQuerier:
    def __init__(self, conn: sqlalchemy.ext.asyncio.AsyncConnection):
        self._conn = conn

    async def create_task(self, *, description: str, person_id: Optional[int], category_id: Optional[int]) -> Optional[models.Task]:
        row = (await self._conn.execute(sqlalchemy.text(CREATE_TASK), {"p1": description, "p2": person_id, "p3": category_id})).first()
        if row is None:
            return None
        return models.Task(
            id=row[0],
            description=row[1],
            created_at=row[2],
            expected_finished_at=row[3],
            state=row[4],
            person_id=row[5],
            category_id=row[6],
        )

    async def delete_task(self, *, id: int) -> Optional[models.Task]:
        row = (await self._conn.execute(sqlalchemy.text(DELETE_TASK), {"p1": id})).first()
        if row is None:
            return None
        return models.Task(
            id=row[0],
            description=row[1],
            created_at=row[2],
            expected_finished_at=row[3],
            state=row[4],
            person_id=row[5],
            category_id=row[6],
        )

    async def get_task_by_id(self, *, id: int) -> Optional[models.Task]:
        row = (await self._conn.execute(sqlalchemy.text(GET_TASK_BY_ID), {"p1": id})).first()
        if row is None:
            return None
        return models.Task(
            id=row[0],
            description=row[1],
            created_at=row[2],
            expected_finished_at=row[3],
            state=row[4],
            person_id=row[5],
            category_id=row[6],
        )

    async def get_tasks_by_username(self, *, username: str) -> AsyncIterator[models.Task]:
        result = await self._conn.stream(sqlalchemy.text(GET_TASKS_BY_USERNAME), {"p1": username})
        async for row in result:
            yield models.Task(
                id=row[0],
                description=row[1],
                created_at=row[2],
                expected_finished_at=row[3],
                state=row[4],
                person_id=row[5],
                category_id=row[6],
            )

    async def update_task(self, arg: UpdateTaskParams) -> Optional[models.Task]:
        row = (await self._conn.execute(sqlalchemy.text(UPDATE_TASK), {
            "p1": arg.description,
            "p2": arg.expected_finished_at,
            "p3": arg.state,
            "p4": arg.person_id,
            "p5": arg.category_id,
            "p6": arg.id,
        })).first()
        if row is None:
            return None
        return models.Task(
            id=row[0],
            description=row[1],
            created_at=row[2],
            expected_finished_at=row[3],
            state=row[4],
            person_id=row[5],
            category_id=row[6],
        )
